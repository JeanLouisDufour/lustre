function test() returns() let tel;
/* The order in package declaration is not relevant */
package P1
open P1;
const
iC1 : T1 = 2;
package P1
type
T1 = int32;
end;
end;
--
/* Declaration using a fully qualified path */
package P1z
const foo: int16 = 3;
end;
package P2z
const bar: int16 = 4;
end;
const foobar1: int16 = P1z::foo + P2z::bar;
--
/* Imported declarations */
package ForeignArithmetics
type imported ForeignInt ;
function imported plus(x,y: ForeignInt) returns (z: ForeignInt);
function twice (x: ForeignInt) returns (y: ForeignInt) y = plus(x, x);
end;
--
/* Imported numeric type */
package ForeignArithmetics_
type imported ForeignInt is integer ;
function plus_two (x: ForeignInt ) returns (y: ForeignInt ) y = x + 2;
end;
--
/*  */
function correct (a:'T) returns (b:'T) where 'T integer
	b = a mod 3;

type t = {lbl1: int32, lbl2: bool, lbl3:{lbl4: int32 , lbl5: float32}};
const c: t = {lbl1: 1, lbl2: true, lbl3:{lbl4 :2, lbl5 :0.5}};
const d1: int32 = c.lbl1;

type t1 = int32;
const wordsize : int16 = 8;
type byte = t1 ^ wordsize;
--
/* Groups are always flattened */
group
G0 = (int32 , bool);
G1 = (int32 , G0);
function f1(x: int32; y: int32; z: bool) returns (r: G1)
r = (x, y, z);
function f2(v: G1) returns (a: int32; b: int32; c: bool)
a, b, c = f1(v);
--
/* Groups are used to manage multiple outputs operators */
function imported f(a, b: int32; c: bool) returns (x,y: int32);
function imported g(a,b: int32) returns (x: int32);
node ex(c: bool; a, b: int32) returns (s, t: int32)
let
s, t = if c then f(a, b, c) else (0, g(f(b, a, not c)));
tel;
--
/* A list expression can contain flows based on different clocks */
function N(x: int32; clock h: bool) returns (y: int32 when h; z: bool)
let
y,z = (x when h, true);
tel;
--
/* Sensor declaration */
sensor temp: float32;
node gradient() returns (diff: float32)
let
diff = 0.0 -> temp - pre temp;
tel;
--
/*  */
function ex4(clock h: bool; y, z: int16) returns (o1: int16; o2: bool)
let
o1 = merge (h; y when h; z when not h);
o2 = (y > z);
tel;
--
/* Valid clock expressions */
type t2= enum {incr, stdby, decr};
function Sample (clock h: bool; clock k: t2; x: int32) returns (y, z: int32)
let
activate when k match
| incr : y = x + 1;
| stdby : y = x ;
| decr : y = x - 1;
returns y;
z = merge (h; x when h; x when not h);
tel;
--
/* Unused local variable */
node ex3(x: int8) returns (y: int8)
var z: int8 last = 0;
let
z = 2*pre(x) + 1;
y = x - pre(x);
tel;
--
/* Overloading of an assume identifier, preventing the use of the former declaration */
const c1: int32 = 0;
node ex0(x: int32; b: bool) returns (y: int32)
let
--assume c1: true; -- KO
assume c1_: true; -- OK
y = if b then x else c1 -> pre y;
tel;
--
/* The condition must be either Boolean or must belong to an enumerated type. This node is erroneous */
node ex1(x: int16)
returns (y: int16)
let
activate when x match
| 0: y = 0;
| _: y = 1;
returns ..;
tel;
--
/* Defined variables must have at least a definition in one of the branches. In this example, o2 has no definition */
node ex2(i: bool)
returns (o1,o2: int64)
let
activate Act if i
then o1 = 1;
else o1 = 2;
returns o1,o2;
tel;
--
/* Conditional blocks can be nested. Notice also that the last branch is empty */
type Tenum = enum {red, blue, pink, purple};
node ex31(eI1: Tenum; iI2: int32)
returns (iO1: int32 last = 0)
let
	activate when eI1 match
	| red: var iV1: int32;
		let
		iV1 = 10 + last 'iO1;
		iO1 = iV1 + iI2;
		tel
	| blue:
		let
			activate if iI2 > 0
			then iO1 = iI2 * iI2;
			else iO1 = -iI2 + last 'iO1;
			returns iO1;
		tel
	| pink: iO1 = 100 -> pre iO1 - 1;
	| purple:
	returns iO1;
tel;
--
/* The following example illustrates a causality error for variable y */
type T = enum {a, b, c_};
node ex5(x: T) returns (y: T last = b)
let
activate when y match
| a: y = a -> pre(y);
| b: y = x;
| c_:
returns ..;
tel
--
/* A branch of a decision block can be empty */
function ex11(i: int32)
returns (o: int32 last = 0)
let
activate if i > 0
then o = i;
else
returns o;
tel

function ex12(i: int32)
returns (o: int32 default = 4)
let
activate if i > 0
then o = i;
else
returns o;
tel
--
/* This first example browses the full syntax available within automaton */
node StateMachine_1(bI1: bool)
returns (bO1: bool default = true; iO2: int16 default = 0; bO3: bool default = false)
let
	automaton SM1
	
	initial state ST1
	unless if bI1 resume ST2;
	sig
		sig1;
	var
		iV1: int16;
	let
		iV1 = 10;
		emit 'sig1;
		bO1 = 'sig1;
		iO2 = iV1 -> pre iO2 + 2;
	tel
	
	state ST2
	sig
		sig1;
	var
		bV1: bool;
	until if true do let emit 'sig1;
			bV1 = 'sig1;
			bO3 = bV1;
			tel
		restart ST1;
	returns ..;
tel
--
/* This example illustrates some of the namespace rules that allows to overload an identifier */
type
SM1 = uint16;
node StateMachine_012(iI1: int32)
returns (iO1: int32)
let
automaton SM1
initial final state ST1
sig
SM1;
var
ST1: int32;
let
ST1 = iI1;
emit 'SM1;
iO1 = ST1 + 1;
tel
returns ..;
tel
--
/* First example */

node StateMachine_062 (iI1: int32)
returns (iO1: int32)
var bV1: bool;
let
automaton SM1
initial state ST1
var bV2: bool;
let
bV2 = false -> not pre bV2;
bV1 = iI1 <> 0;
iO1 = iI1 * 2;
tel
until if bV1 and bV2 restart ST2;
state ST2
unless if bV1 resume ST1;
returns ..;
tel

/* Second example */
node StateMachine_062_ (iI1: int32)
returns (iO1: int32)
var bV1: bool;
let
automaton SM1
initial state ST1
var bV2: bool;
let
bV2 = false -> not pre bV2;
bV1 = iI1 <> 0;
iO1 = iI1 * 2;
tel
until if bV1 and bV2 restart ST2;
state ST2
unless if last 'bV1 resume ST1;
returns ..;
tel
--
/* This example illustrates the use of the default declaration */
node StateMachine_073(iI1: int16; bI2: bool)
returns (iO1: int16 default = 10; iO2: int16 default = 5 * iO1)
let
automaton SM1
initial state ST1
unless if bI2 resume ST2;
let
iO1 = iI1;
tel
until if true restart ST2;
state ST2
let
iO2 = 0 -> pre iO1 + iI1;
tel
until if true restart ST1;
returns ..;
tel
--
/* Variable iO1 cannot be defined both in the transitions of ST1 and in the body of ST2 */
node StateMachine_078(iI1: int32; bI2: bool)
returns (iO1, iO2: int32)
let
automaton
initial state ST1
unless if bI2 do iO1 = iI1 + 1; restart ST2;
until if true do iO1 = 10; restart ST2;
state ST2
unless if bI2 do iO2 = 0; restart ST1;
iO1 = 0;
until if true do iO2 = -10; restart ST1;
returns ..;
tel
--
/* Example 6 */
node StateMachine_112(iI1: int32 when bI2; clock bI2: bool)
returns (iO1: int32 when bI2)
let
automaton
initial state ST1
var iV1: int32 when bI2;
let
iV1 = (0 when bI2) -> pre iV1 + 1 when bI2;
iO1 = iI1 -> pre iV1;
tel
until if bI2 restart ST1;
returns iO1;
tel
--
/* Example 7 */
node StateMachine_063(iI1: int16)
returns (iO1: int16)
let
automaton SM1
initial state ST1
let
iO1 = iI1 * 2;
tel
until if bV1 do
var bV1: bool;
let
bV1 = iI1 > 10;
tel
restart ST2;
state ST2
returns ..;
tel
--
/* Example 8: */
node StateMachine_122 (iI1: int32; bI2: bool)
returns (iO1: int32; iO2: int32)
let
automaton
initial state ST1
let
iO1 = iI1;
iO2 = iI1 * 2;
tel
until if bI2 restart ST2;
state ST2
let
iO1 = 1 -> - iI1;
tel
until if true restart ST1;
returns ..;
tel
--
/* Example 9 */
node N_() returns (x, y: int32 last = 0)
let
automaton A
initial state ST1
let tel
until if true restart ST2 ;
state ST2
var z: int32 last = 2;
let
automaton A2
initial state ST2_1
let
z = 3 + last 'z;
x = last 'x + 1;
tel
until if x mod 2 = 0 resume ST2_2;
state ST2_2
let
x = last 'x -1;
y = 0 -> pre z - 1;
tel
until if true resume ST2_2 ;
returns .. ;
tel
until if true resume ST1 ;
returns .. ;
tel
--
/* Example 11: A single state machine with two states and data flow definitions in states */
node jld() returns (o:bool)
automaton SM1
initial state EVEN
unless if i restart ODD;
let
o = true;
tel
state ODD
unless if i restart EVEN;
let
o = false;
tel
returns o ;
--
/* Example 12: SM1 has a macro state A which includes two state machines in parallel */
node jld_() returns ()
automaton SM1
initial state A
let
automaton SM2
initial state B
until if 2 times 'S1 restart C;
final state C
returns .. ;
automaton SM3
initial state D
until if 2 times c restart E;
final state E
returns .. ;
tel
until
synchro do let emit 'S2; tel restart F;
state B
returns .. ;
--
/* Example 13: State B can be started on condition v, or resumed by history on condition not v. */
node jld__() returns ()
automaton SM1
initial state A
unless
if not v do let emit 'S1; tel resume B;
if v do let emit 'S2; tel restart B;
state B
returns .. ;
--
/* Example 14: The following state machine illustrates the use of fork transitions */
node jld____() returns ()
automaton SM1
initial state A
until
if c1 do let emit 'S1; tel
if c2 do let emit 'S2; tel restart B
else do let emit 'S3; tel
if c4 do let emit 'S4; tel restart C
elsif c5 do let emit 'S5; tel restart D
else do let emit 'S6; tel restart E
end
end;
state B
state C
state D
state E
returns .. ;
--
/* The following example illustrates the semantic differences between last and pre */

node UpDownPre() returns(x:int16)
let
automaton SSM
initial state Up
let
x = 0 -> pre(x) + 1;
tel
until if (x>=3) resume Down;
state Down
let
x = 2 -> pre(x) -1;
tel
until if (x<=-3) resume Up;
returns x;
tel

node UpDownLast() returns(x:int16)
let
automaton SSM
initial state Up
let
x = 0 -> last 'x + 1;
tel
until if (x>=3) resume Down;
state Down
let
x = last 'x - 1;
tel
until if (x<=-3) resume Up;
returns x;
tel
--
/* User operators can be easily fed with list of expressions */
group G = (int64, int64, bool);
function imported f_(a, b: int64; c: bool) returns (x, y: int64);
function imported g_(a, b: int64) returns (x: int64);
node ex51(c: bool; a, b: int64) returns (s, t: int64)
var l: G;
let
l = (a+b, a-b, c);
s, t = if c then f_(l) else (0, g_(f_(b, a, not c)));
tel;
--
node times_behavior (n : 'a; c : bool) returns (o : bool) where 'a signed
var
v3, v4 : 'a;
let
v4 = n -> pre (v3);
v3 = if (v4 < 0)
then v4
else (if c then v4 - 1 else v4);
o = c and (v3 = 0);
tel
--
/* Valid array expressions */
const
aC1: int32^2 = [1,1];
aC2: int32^1 = [0];
function ex6(aI1, aI2: int32^2; i: uint16)
returns (aO1, aO2, aO3, aO4: int32^4; aO5: int32^2^3)
let
aO1 = reverse aI2 @ reverse aI1;
aO2 = aC2 @ [[1,2,3],[2,3,4]][2*3 - 5];
aO3 = aO2 [1 .. 2] @ aI2;
aO4 = aI1 @ ([aI1,aI2].[i] default aC1);
aO5 = [[0,1],[2,3],[4,5]];
tel
--
/* Arrays can used by polymorphic operators */
type imported T1;
const imported C:T1;
group G2=(int32, int32);
node ex7(aI1, aI2: int32^2; clock clk1: bool; aI3: T1)
returns (aO1, aO2: int32^2; aO3: T1^2)
var v1: G2;
let
v1 = (aI1[0],aI2[1]);
aO1 = fby(aI1; 1; [v1]);
aO2 = merge (clk1; aI1 when clk1; aI2 when not clk1);
aO3 = reverse (C -> aI3)^2;
tel
--
/* Structures and arrays can be fully mixed */
type
Tstr1 = {l1: int32};
Tstr2 = {l1: int32, l2: int32^2};
function ex8(sI1: Tstr2; sI2: Tstr1^2)
returns (iO1: int32)
var
iV1, iV2: int32;
let
iV1 = sI1.l2[0];
iV2 = sI2[0].l1;
iO1 = iV1 + iV2;
tel
--
/* Mixed constructor can be used with indexes or labels */
type
Tstr = {l1: int32,l2: float64};
Tarr = int32^3;
function ex9(sI1: Tstr; sI2:{l1:int32})
returns (sO1: Tstr; aO2: Tarr; sO3:{l1: int32})
let
sO1 = (sI1 with .l2 = 3.0);
aO2 = (sI2.l1^3 with [0] = 0);
sO3 = ((sI2 with .l1 = 1) with .l1 = 3);
tel
--
node RetractionSequence(
      handle : bool;
      gears_locked_up : bool;
      gears_locked_down : bool;
      doors_open : bool;
      doors_closed : bool;
      gear_shock_absorbers : bool)
    returns (
      general_EV : bool default = false;
      open_EV : bool default = false;
      close_EV : bool default = false;
      retract_EV : bool default = false)
  let
    
    automaton SM1
      state State1
        unless
          if handle restart State2;

      state State2
        unless
          if doors_open restart State3;
        var
          _L1 : bool;
          _L2 : bool;
        let
          general_EV= _L1;
          _L1= true;
          open_EV= _L2;
          _L2= true;
        tel

      state State3
        unless
          if true
            do if not gear_shock_absorbers and gears_locked_down restart State40
            elsif gear_shock_absorbers restart State5
            end;

      state State5
        unless
          if true restart State6;
        var
          _L1 : bool;
        let
          open_EV= _L1;
          _L1= false;
        tel

      state State7
        var
          _L1 : bool;
          _L2 : bool;
        let
          general_EV= _L1;
          _L1= false;
          close_EV= _L2;
          _L2= false;
        tel

      initial state State0
        unless
          if gears_locked_down and doors_closed restart State1;

      state State40
        unless
          if gears_locked_up restart State41;
        var
          _L1 : bool;
        let
          retract_EV= _L1;
          _L1= true;
        tel

      state State6
        unless
          if doors_closed do restart State7;
        var
          _L1 : bool;
        let
          close_EV= _L1;
          _L1= true;
        tel

      state State41
        unless
          if true restart State6;
        var
          _L1 : bool;
        let
          retract_EV= _L1;
          _L1= false;
        tel
    returns ..;
  tel
--
function CompAFDXT0_40ms() returns ()
  let
    _L2=
      (MMR_data.MMRGPS_Latitude + MMR_data.MMRGPS_LatitudeFine) / C_ConvDeg2Rad;
  tel
--
function LIBEARTH_CalculerRNRE<<P_CFG_ERA_ARG>>(
      SinLat : real;
      Altitude : real)
    returns (UnSurR_NE : real^2; RN_RE : real^2)
  let
    _L4_=
      (activate #2402 LIBEARTH_CalculerRNRE_RNRE_ARG every _L8_)(_L2_, _L3_);
/* */
    _L5_=
      (activate #2403 LIBEARTH_CalculerRNRE_RNRE_ERA every not _L8_)(_L2_,
        _L3_);
/* */
    UnSurR_NE= _L1_;
    RN_RE= _L6_;
    _= P_CFG_ERA_ARG;
  tel
